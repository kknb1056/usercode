// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "l1menu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace l1menuprotobuf {

namespace {

const ::google::protobuf::Descriptor* Trigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trigger_reflection_ = NULL;
const ::google::protobuf::Descriptor* Trigger_TriggerParameter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Trigger_TriggerParameter_reflection_ = NULL;
const ::google::protobuf::Descriptor* Event_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Event_reflection_ = NULL;
const ::google::protobuf::Descriptor* Run_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Run_reflection_ = NULL;
const ::google::protobuf::Descriptor* SampleHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SampleHeader_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_l1menu_2eproto() {
  protobuf_AddDesc_l1menu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "l1menu.proto");
  GOOGLE_CHECK(file != NULL);
  Trigger_descriptor_ = file->message_type(0);
  static const int Trigger_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, parameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, varying_parameter_),
  };
  Trigger_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trigger_descriptor_,
      Trigger::default_instance_,
      Trigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trigger));
  Trigger_TriggerParameter_descriptor_ = Trigger_descriptor_->nested_type(0);
  static const int Trigger_TriggerParameter_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger_TriggerParameter, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger_TriggerParameter, value_),
  };
  Trigger_TriggerParameter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Trigger_TriggerParameter_descriptor_,
      Trigger_TriggerParameter::default_instance_,
      Trigger_TriggerParameter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger_TriggerParameter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Trigger_TriggerParameter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Trigger_TriggerParameter));
  Event_descriptor_ = file->message_type(1);
  static const int Event_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, weight_),
  };
  Event_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Event_descriptor_,
      Event::default_instance_,
      Event_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Event, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Event));
  Run_descriptor_ = file->message_type(2);
  static const int Run_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Run, event_),
  };
  Run_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Run_descriptor_,
      Run::default_instance_,
      Run_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Run, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Run, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Run));
  SampleHeader_descriptor_ = file->message_type(3);
  static const int SampleHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleHeader, trigger_),
  };
  SampleHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SampleHeader_descriptor_,
      SampleHeader::default_instance_,
      SampleHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SampleHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SampleHeader));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_l1menu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trigger_descriptor_, &Trigger::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Trigger_TriggerParameter_descriptor_, &Trigger_TriggerParameter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Event_descriptor_, &Event::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Run_descriptor_, &Run::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SampleHeader_descriptor_, &SampleHeader::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_l1menu_2eproto() {
  delete Trigger::default_instance_;
  delete Trigger_reflection_;
  delete Trigger_TriggerParameter::default_instance_;
  delete Trigger_TriggerParameter_reflection_;
  delete Event::default_instance_;
  delete Event_reflection_;
  delete Run::default_instance_;
  delete Run_reflection_;
  delete SampleHeader::default_instance_;
  delete SampleHeader_reflection_;
}

void protobuf_AddDesc_l1menu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014l1menu.proto\022\016l1menuprotobuf\"\261\001\n\007Trigg"
    "er\022\014\n\004name\030\001 \002(\t\022\017\n\007version\030\002 \002(\005\022;\n\tpar"
    "ameter\030\003 \003(\0132(.l1menuprotobuf.Trigger.Tr"
    "iggerParameter\022\031\n\021varying_parameter\030\004 \003("
    "\t\032/\n\020TriggerParameter\022\014\n\004name\030\001 \002(\t\022\r\n\005v"
    "alue\030\002 \002(\002\"*\n\005Event\022\021\n\tthreshold\030\001 \003(\002\022\016"
    "\n\006weight\030\002 \001(\002\"+\n\003Run\022$\n\005event\030\001 \003(\0132\025.l"
    "1menuprotobuf.Event\"8\n\014SampleHeader\022(\n\007t"
    "rigger\030\001 \003(\0132\027.l1menuprotobuf.Trigger", 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "l1menu.proto", &protobuf_RegisterTypes);
  Trigger::default_instance_ = new Trigger();
  Trigger_TriggerParameter::default_instance_ = new Trigger_TriggerParameter();
  Event::default_instance_ = new Event();
  Run::default_instance_ = new Run();
  SampleHeader::default_instance_ = new SampleHeader();
  Trigger::default_instance_->InitAsDefaultInstance();
  Trigger_TriggerParameter::default_instance_->InitAsDefaultInstance();
  Event::default_instance_->InitAsDefaultInstance();
  Run::default_instance_->InitAsDefaultInstance();
  SampleHeader::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_l1menu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_l1menu_2eproto {
  StaticDescriptorInitializer_l1menu_2eproto() {
    protobuf_AddDesc_l1menu_2eproto();
  }
} static_descriptor_initializer_l1menu_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Trigger_TriggerParameter::kNameFieldNumber;
const int Trigger_TriggerParameter::kValueFieldNumber;
#endif  // !_MSC_VER

Trigger_TriggerParameter::Trigger_TriggerParameter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trigger_TriggerParameter::InitAsDefaultInstance() {
}

Trigger_TriggerParameter::Trigger_TriggerParameter(const Trigger_TriggerParameter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trigger_TriggerParameter::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trigger_TriggerParameter::~Trigger_TriggerParameter() {
  SharedDtor();
}

void Trigger_TriggerParameter::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Trigger_TriggerParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trigger_TriggerParameter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trigger_TriggerParameter_descriptor_;
}

const Trigger_TriggerParameter& Trigger_TriggerParameter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l1menu_2eproto();  return *default_instance_;
}

Trigger_TriggerParameter* Trigger_TriggerParameter::default_instance_ = NULL;

Trigger_TriggerParameter* Trigger_TriggerParameter::New() const {
  return new Trigger_TriggerParameter;
}

void Trigger_TriggerParameter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trigger_TriggerParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_value;
        break;
      }
      
      // required float value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trigger_TriggerParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required float value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->value(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trigger_TriggerParameter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required float value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->value(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trigger_TriggerParameter::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required float value = 2;
    if (has_value()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trigger_TriggerParameter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trigger_TriggerParameter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trigger_TriggerParameter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trigger_TriggerParameter::MergeFrom(const Trigger_TriggerParameter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trigger_TriggerParameter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger_TriggerParameter::CopyFrom(const Trigger_TriggerParameter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger_TriggerParameter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void Trigger_TriggerParameter::Swap(Trigger_TriggerParameter* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trigger_TriggerParameter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trigger_TriggerParameter_descriptor_;
  metadata.reflection = Trigger_TriggerParameter_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Trigger::kNameFieldNumber;
const int Trigger::kVersionFieldNumber;
const int Trigger::kParameterFieldNumber;
const int Trigger::kVaryingParameterFieldNumber;
#endif  // !_MSC_VER

Trigger::Trigger()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Trigger::InitAsDefaultInstance() {
}

Trigger::Trigger(const Trigger& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Trigger::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Trigger::~Trigger() {
  SharedDtor();
}

void Trigger::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Trigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Trigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Trigger_descriptor_;
}

const Trigger& Trigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l1menu_2eproto();  return *default_instance_;
}

Trigger* Trigger::default_instance_ = NULL;

Trigger* Trigger::New() const {
  return new Trigger;
}

void Trigger::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    version_ = 0;
  }
  parameter_.Clear();
  varying_parameter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Trigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_version;
        break;
      }
      
      // required int32 version = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        break;
      }
      
      // repeated .l1menuprotobuf.Trigger.TriggerParameter parameter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_parameter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_parameter;
        if (input->ExpectTag(34)) goto parse_varying_parameter;
        break;
      }
      
      // repeated string varying_parameter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_varying_parameter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_varying_parameter()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->varying_parameter(0).data(), this->varying_parameter(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_varying_parameter;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Trigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->version(), output);
  }
  
  // repeated .l1menuprotobuf.Trigger.TriggerParameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->parameter(i), output);
  }
  
  // repeated string varying_parameter = 4;
  for (int i = 0; i < this->varying_parameter_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->varying_parameter(i).data(), this->varying_parameter(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->varying_parameter(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Trigger::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required int32 version = 2;
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->version(), target);
  }
  
  // repeated .l1menuprotobuf.Trigger.TriggerParameter parameter = 3;
  for (int i = 0; i < this->parameter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->parameter(i), target);
  }
  
  // repeated string varying_parameter = 4;
  for (int i = 0; i < this->varying_parameter_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->varying_parameter(i).data(), this->varying_parameter(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->varying_parameter(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Trigger::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required int32 version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  // repeated .l1menuprotobuf.Trigger.TriggerParameter parameter = 3;
  total_size += 1 * this->parameter_size();
  for (int i = 0; i < this->parameter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->parameter(i));
  }
  
  // repeated string varying_parameter = 4;
  total_size += 1 * this->varying_parameter_size();
  for (int i = 0; i < this->varying_parameter_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->varying_parameter(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Trigger::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Trigger* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Trigger*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Trigger::MergeFrom(const Trigger& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameter_.MergeFrom(from.parameter_);
  varying_parameter_.MergeFrom(from.varying_parameter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Trigger::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Trigger::CopyFrom(const Trigger& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Trigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < parameter_size(); i++) {
    if (!this->parameter(i).IsInitialized()) return false;
  }
  return true;
}

void Trigger::Swap(Trigger* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(version_, other->version_);
    parameter_.Swap(&other->parameter_);
    varying_parameter_.Swap(&other->varying_parameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Trigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Trigger_descriptor_;
  metadata.reflection = Trigger_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Event::kThresholdFieldNumber;
const int Event::kWeightFieldNumber;
#endif  // !_MSC_VER

Event::Event()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Event::InitAsDefaultInstance() {
}

Event::Event(const Event& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Event::SharedCtor() {
  _cached_size_ = 0;
  weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Event::~Event() {
  SharedDtor();
}

void Event::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Event::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Event::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Event_descriptor_;
}

const Event& Event::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l1menu_2eproto();  return *default_instance_;
}

Event* Event::default_instance_ = NULL;

Event* Event::New() const {
  return new Event;
}

void Event::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    weight_ = 0;
  }
  threshold_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Event::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float threshold = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13, input, this->mutable_threshold())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_threshold())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(13)) goto parse_threshold;
        if (input->ExpectTag(21)) goto parse_weight;
        break;
      }
      
      // optional float weight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
          set_has_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Event::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated float threshold = 1;
  for (int i = 0; i < this->threshold_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->threshold(i), output);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Event::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated float threshold = 1;
  for (int i = 0; i < this->threshold_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(1, this->threshold(i), target);
  }
  
  // optional float weight = 2;
  if (has_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Event::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional float weight = 2;
    if (has_weight()) {
      total_size += 1 + 4;
    }
    
  }
  // repeated float threshold = 1;
  {
    int data_size = 0;
    data_size = 4 * this->threshold_size();
    total_size += 1 * this->threshold_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Event::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Event* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Event*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Event::MergeFrom(const Event& from) {
  GOOGLE_CHECK_NE(&from, this);
  threshold_.MergeFrom(from.threshold_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_weight()) {
      set_weight(from.weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Event::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Event::CopyFrom(const Event& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Event::IsInitialized() const {
  
  return true;
}

void Event::Swap(Event* other) {
  if (other != this) {
    threshold_.Swap(&other->threshold_);
    std::swap(weight_, other->weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Event::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Event_descriptor_;
  metadata.reflection = Event_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Run::kEventFieldNumber;
#endif  // !_MSC_VER

Run::Run()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Run::InitAsDefaultInstance() {
}

Run::Run(const Run& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Run::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Run::~Run() {
  SharedDtor();
}

void Run::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Run::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Run::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Run_descriptor_;
}

const Run& Run::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l1menu_2eproto();  return *default_instance_;
}

Run* Run::default_instance_ = NULL;

Run* Run::New() const {
  return new Run;
}

void Run::Clear() {
  event_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Run::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .l1menuprotobuf.Event event = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Run::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .l1menuprotobuf.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Run::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .l1menuprotobuf.Event event = 1;
  for (int i = 0; i < this->event_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Run::ByteSize() const {
  int total_size = 0;
  
  // repeated .l1menuprotobuf.Event event = 1;
  total_size += 1 * this->event_size();
  for (int i = 0; i < this->event_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Run::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Run* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Run*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Run::MergeFrom(const Run& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_.MergeFrom(from.event_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Run::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Run::CopyFrom(const Run& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Run::IsInitialized() const {
  
  return true;
}

void Run::Swap(Run* other) {
  if (other != this) {
    event_.Swap(&other->event_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Run::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Run_descriptor_;
  metadata.reflection = Run_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SampleHeader::kTriggerFieldNumber;
#endif  // !_MSC_VER

SampleHeader::SampleHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SampleHeader::InitAsDefaultInstance() {
}

SampleHeader::SampleHeader(const SampleHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SampleHeader::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SampleHeader::~SampleHeader() {
  SharedDtor();
}

void SampleHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SampleHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SampleHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SampleHeader_descriptor_;
}

const SampleHeader& SampleHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_l1menu_2eproto();  return *default_instance_;
}

SampleHeader* SampleHeader::default_instance_ = NULL;

SampleHeader* SampleHeader::New() const {
  return new SampleHeader;
}

void SampleHeader::Clear() {
  trigger_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SampleHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .l1menuprotobuf.Trigger trigger = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trigger:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trigger()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_trigger;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SampleHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .l1menuprotobuf.Trigger trigger = 1;
  for (int i = 0; i < this->trigger_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trigger(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SampleHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .l1menuprotobuf.Trigger trigger = 1;
  for (int i = 0; i < this->trigger_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trigger(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SampleHeader::ByteSize() const {
  int total_size = 0;
  
  // repeated .l1menuprotobuf.Trigger trigger = 1;
  total_size += 1 * this->trigger_size();
  for (int i = 0; i < this->trigger_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trigger(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SampleHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SampleHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SampleHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SampleHeader::MergeFrom(const SampleHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  trigger_.MergeFrom(from.trigger_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SampleHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SampleHeader::CopyFrom(const SampleHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SampleHeader::IsInitialized() const {
  
  for (int i = 0; i < trigger_size(); i++) {
    if (!this->trigger(i).IsInitialized()) return false;
  }
  return true;
}

void SampleHeader::Swap(SampleHeader* other) {
  if (other != this) {
    trigger_.Swap(&other->trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SampleHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SampleHeader_descriptor_;
  metadata.reflection = SampleHeader_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace l1menuprotobuf

// @@protoc_insertion_point(global_scope)
